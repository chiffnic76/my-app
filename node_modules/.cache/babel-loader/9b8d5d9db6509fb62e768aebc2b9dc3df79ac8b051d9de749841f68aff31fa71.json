{"ast":null,"code":"var _jsxFileName = \"/data/data/com.termux/files/home/my-app/src/components/pages/SubscriptionPage/SubscriptionPage.js\",\n  _s = $RefreshSig$();\n// /* src/components/pages/SubscriptionPage/SubscriptionPage.js\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { auth, db, storage } from '../../../services/FirebaseConfig';\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\nimport CloseButton from '../../ui/buttons/CloseButton';\nimport './SubscriptionPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SubscriptionPage() {\n  _s();\n  const navigate = useNavigate();\n  const goToWelcomePage = () => {\n    navigate('/'); // Redirige vers la page de connexion\n  };\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [profilePhoto, setProfilePhoto] = useState(null);\n  const [error, setError] = useState('');\n  const handleSubscription = async e => {\n    e.preventDefault();\n    if (password !== confirmPassword) {\n      alert(\"Passwords do not match\");\n      return;\n    }\n    try {\n      // Créer un utilisateur avec email et mot de passe dans Firebase\n      const userCredential = await auth.createUserWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n      await createUserWithEmailAndPassword(auth, email, password);\n      if (profilePhoto) {\n        const photoRef = storage.ref(`profilePhotos/${user.uid}`);\n        await photoRef.put(profilePhoto);\n        const photoURL = await photoRef.getDownloadURL();\n\n        // Save user details to Firestore\n        await db.collection('users').doc(user.uid).set({\n          firstName,\n          lastName,\n          photoURL,\n          email\n        });\n      }\n      navigate('/login'); // Redirige vers la page principale après inscription\n    } catch (err) {\n      setError(\"Erreur d'inscription : \" + err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"subscription-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"subscription-form\",\n      onSubmit: handleSubscription,\n      children: [/*#__PURE__*/_jsxDEV(CloseButton, {\n        onClose: goToWelcomePage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Inscription\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"First Name\",\n        value: firstName,\n        onChange: e => setFirstName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Last Name\",\n        value: lastName,\n        onChange: e => setLastName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Confirm Password\",\n        value: confirmPassword,\n        onChange: e => setConfirmPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => setProfilePhoto(e.target.files[0]),\n        accept: \"image/*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        type: \"submit\",\n        children: \"S'inscrire\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(SubscriptionPage, \"2YknQQ+Yl4t3/QUI2M+z/sSSmS4=\", false, function () {\n  return [useNavigate];\n});\n_c = SubscriptionPage;\n;\nexport default SubscriptionPage;\n\n/*\nimport React, { useState } from 'react';\nimport { auth, db, storage } from './firebaseConfig'; // Firebase config file\n\nfunction SignupPage() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [profilePhoto, setProfilePhoto] = useState(null);\n\n  const handleSignup = async (e) => {\n    e.preventDefault();\n    if (password !== confirmPassword) {\n      alert(\"Passwords do not match\");\n      return;\n    }\n    try {\n      const userCredential = await auth.createUserWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n      \n      // Upload profile photo\n      if (profilePhoto) {\n        const photoRef = storage.ref(`profilePhotos/${user.uid}`);\n        await photoRef.put(profilePhoto);\n        const photoURL = await photoRef.getDownloadURL();\n\n        // Save user details to Firestore\n        await db.collection('users').doc(user.uid).set({\n          firstName,\n          lastName,\n          photoURL,\n          email,\n        });\n      }\n    } catch (error) {\n      console.error(\"Error signing up:\", error);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSignup}>\n      <input type=\"text\" placeholder=\"First Name\" value={firstName} onChange={(e) => setFirstName(e.target.value)} required />\n      <input type=\"text\" placeholder=\"Last Name\" value={lastName} onChange={(e) => setLastName(e.target.value)} required />\n      <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n      <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} required />\n      <input type=\"password\" placeholder=\"Confirm Password\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} required />\n      <input type=\"file\" onChange={(e) => setProfilePhoto(e.target.files[0])} accept=\"image/*\" />\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  );\n}\n\nexport default SignupPage;\n*/\nvar _c;\n$RefreshReg$(_c, \"SubscriptionPage\");","map":{"version":3,"names":["React","useState","useNavigate","auth","db","storage","createUserWithEmailAndPassword","CloseButton","jsxDEV","_jsxDEV","SubscriptionPage","_s","navigate","goToWelcomePage","firstName","setFirstName","lastName","setLastName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","profilePhoto","setProfilePhoto","error","setError","handleSubscription","e","preventDefault","alert","userCredential","user","photoRef","ref","uid","put","photoURL","getDownloadURL","collection","doc","set","err","message","className","children","onSubmit","onClose","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","required","files","accept","_c","$RefreshReg$"],"sources":["/data/data/com.termux/files/home/my-app/src/components/pages/SubscriptionPage/SubscriptionPage.js"],"sourcesContent":["// /* src/components/pages/SubscriptionPage/SubscriptionPage.js\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { auth, db, storage } from '../../../services/FirebaseConfig';\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\nimport CloseButton from '../../ui/buttons/CloseButton';\nimport './SubscriptionPage.css';\n\nfunction SubscriptionPage () {\n  const navigate = useNavigate();\n  const goToWelcomePage = () => {\n    navigate('/');  // Redirige vers la page de connexion\n  };\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [profilePhoto, setProfilePhoto] = useState(null);\n  const [error, setError] = useState('');\n  \n  const handleSubscription = async (e) => {\n    e.preventDefault();\n    if (password !== confirmPassword) {\n      alert(\"Passwords do not match\");\n      return;\n    }\n    try {\n      // Créer un utilisateur avec email et mot de passe dans Firebase\n      const userCredential = await auth.createUserWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n      await createUserWithEmailAndPassword(auth, email, password);\n      if (profilePhoto) {\n        const photoRef = storage.ref(`profilePhotos/${user.uid}`);\n        await photoRef.put(profilePhoto);\n        const photoURL = await photoRef.getDownloadURL();\n\n        // Save user details to Firestore\n        await db.collection('users').doc(user.uid).set({\n          firstName,\n          lastName,\n          photoURL,\n          email,\n        });\n      }\n      navigate('/login');  // Redirige vers la page principale après inscription\n    } catch (err) {\n      setError(\"Erreur d'inscription : \" + err.message);\n    }\n  };\n\n  return (\n    <div className=\"subscription-wrapper\">\n       <form className=\"subscription-form\" onSubmit={handleSubscription}>\n        <CloseButton onClose={goToWelcomePage} />\n        <h2>Inscription</h2>\n        {error && <p className=\"error-message\">{error}</p>}\n        <input type=\"text\" placeholder=\"First Name\" value={firstName} onChange={(e) => setFirstName(e.target.value)} required />\n        <input type=\"text\" placeholder=\"Last Name\" value={lastName} onChange={(e) => setLastName(e.target.value)} required />\n        <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n        <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} required />\n        <input type=\"password\" placeholder=\"Confirm Password\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} required />\n        <input type=\"file\" onChange={(e) => setProfilePhoto(e.target.files[0])} accept=\"image/*\" />\n        <button className=\"button\" type=\"submit\">S'inscrire</button>\n      </form>\n    </div>\n  );\n};\n\nexport default SubscriptionPage;\n\n\n/*\nimport React, { useState } from 'react';\nimport { auth, db, storage } from './firebaseConfig'; // Firebase config file\n\nfunction SignupPage() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [profilePhoto, setProfilePhoto] = useState(null);\n\n  const handleSignup = async (e) => {\n    e.preventDefault();\n    if (password !== confirmPassword) {\n      alert(\"Passwords do not match\");\n      return;\n    }\n    try {\n      const userCredential = await auth.createUserWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n      \n      // Upload profile photo\n      if (profilePhoto) {\n        const photoRef = storage.ref(`profilePhotos/${user.uid}`);\n        await photoRef.put(profilePhoto);\n        const photoURL = await photoRef.getDownloadURL();\n\n        // Save user details to Firestore\n        await db.collection('users').doc(user.uid).set({\n          firstName,\n          lastName,\n          photoURL,\n          email,\n        });\n      }\n    } catch (error) {\n      console.error(\"Error signing up:\", error);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSignup}>\n      <input type=\"text\" placeholder=\"First Name\" value={firstName} onChange={(e) => setFirstName(e.target.value)} required />\n      <input type=\"text\" placeholder=\"Last Name\" value={lastName} onChange={(e) => setLastName(e.target.value)} required />\n      <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n      <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} required />\n      <input type=\"password\" placeholder=\"Confirm Password\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} required />\n      <input type=\"file\" onChange={(e) => setProfilePhoto(e.target.files[0])} accept=\"image/*\" />\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  );\n}\n\nexport default SignupPage;\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}